'use strict';

angular.service('Aes', function() {
    var KEY_SIZE = 256 / 8;
    var BLOCK_SIZE = 128 / 8;
    var MODE = slowAES.modeOfOperation.CBC;
    function progress(category, vault) {
	return function(p) {
	    var status = "PBKDF2 (" + category + ") at " + p.toFixed() + "%";
	    if (vault) {
		vault.progress(status);
	    } else {
		console.log(status);
	    }
	}
    }
    function get_key_and_iv(password, salt, vault, callback, keyRounds, ivRounds) {
	var pbkdf2_key = new PBKDF2(password, salt, keyRounds, KEY_SIZE);
	var pbkdf2_iv = new PBKDF2(password, salt, ivRounds, BLOCK_SIZE);
	pbkdf2_key.deriveKey(progress("key", vault), function(key) {
	    pbkdf2_iv.deriveKey(progress("iv", vault), function(iv) {
		callback(key, iv);
	    });
	});
    }
    function log_bytes(desc, bytes) {
	console.log(desc + ": " + bytes);
    }
    function precompute(password, vault, callback, keyRounds, ivRounds) {
	if (!vault.resource.salt) {
	    var salt1 = cryptoHelpers.getRandom(0, 2147483647);
	    var salt2 = cryptoHelpers.getRandom(0, 2147483647);
	    vault.resource.salt = cryptoHelpers.toHex(salt1) + cryptoHelpers.toHex(salt2);
	}
	get_key_and_iv(password, vault.resource.salt, vault, function(k, iv) {
	    vault.key = k;
	    vault.iv = iv;
	    (callback || angular.noop)(k, iv);
	}, keyRounds, ivRounds);
    }
    var VERSIONS = {
	aesWeak: { keyRounds: 10, ivRounds: 2 },
	aesStandard: { keyRounds: 500, ivRounds: 100 },
	aesParanoid: { keyRounds: 5000, ivRounds: 1000 }
    };
    return {
	versions: (function() {
	    var l = [];
	    for (var v in VERSIONS) {
		l.push(v);
	    };
	    return l;
	})(),
	precompute: function(password, vault, callback) {
	    var v = VERSIONS[vault.resource.crypto || 'aesWeak'];
	    if (!v) {
		throw new Error("Unsupported encryption version " + vault.resource.crypto);
	    }
	    return precompute(password, vault, callback, v.keyRounds, v.ivRounds);
	},
	encrypt: function(key, iv, ptext) {
	    if (!(key && iv)) {
		throw new Error("Need key and iv already calculated, key was " + key + ", iv was " + iv);
	    }
	    var bytes = cryptoHelpers.convertStringToByteArray(ptext);
	    var ctext = slowAES.encrypt(bytes, MODE, key, iv);
	    return cryptoHelpers.toHex(ctext);
	},
	decrypt: function (key, iv, ctext) {
	    var bytes = cryptoHelpers.toNumbers(ctext);
	    var ptext = slowAES.decrypt(bytes, MODE, key, iv);
	    var decoded = cryptoHelpers.convertByteArrayToString(ptext);
	    try {
		return angular.fromJson(decoded);
	    } catch (e) {
		return null;
	    }
	}
    };
}, {$inject: []});

angular.service('Blob', function($resource) {
    return $resource('/wallets/:walletId', {walletId: '@id'}, {
	create: { method: 'POST' },
	index: { method: 'GET', params: {walletId: ''}, isArray: true },
	update: { method: 'PUT' },
	destroy: { method: 'DELETE' }
    });
}, {$inject: ['$resource']});
