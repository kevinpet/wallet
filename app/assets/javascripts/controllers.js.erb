'use strict';
function AppCtrl($route, $location, $window, $xhr) {
    $xhr.defaults.headers.post['Content-Type'] = 'application/json';
    $xhr.defaults.headers.put['Content-Type'] = 'application/json';

    var token = $("meta[name='csrf-token']").attr("content");
    $xhr.defaults.headers.post['X-CSRF-Token'] = token;
    $xhr.defaults.headers.put['X-CSRF-Token'] = token;
    $xhr.defaults.headers['delete']['X-CSRF-Token'] = token;

    $route.when('/vaults', {template: '<%= asset_path "vaults.html" %>', controller: VaultsCtrl});

    var self = this;

    $route.onChange(function() {
	if ($location.hash === '') {
	    $location.updateHash('/vaults');
	    self.$eval();
	} else {
	    $route.current.scope.params = $route.current.params;
	    $window.scrollTo(0,0);
	}
    });
}
AppCtrl.$inject = ['$route', '$location', '$window', '$xhr'];

function VaultsCtrl(Blob, Aes) {
    function Card(json) {
	if (json) {
	    this.name = json.name;
	    this.url = json.url;
	    this.login = json.login;
	    this.password = json.password;
	    this.details = json.details;
	    this.category = json.category;
	    this.expanded = false;
	} else {
	    this.name = "Unnamed";
	    this.expanded = true;
	}
    }
    Card.prototype.deleted = false;
    Card.prototype.hide = function() {
	this.expanded = false;
    }
    Card.prototype.show = function() {
	this.shown = !this.shown;
    }
    Card.prototype.toggle = function() {
	this.expanded = !this.expanded;
    }
    Card.prototype.toSerial = function() {
	var card = {
	    name: this.name,
	    url: this.url,
	    login: this.login,
	    password: this.password,
	    category: this.category,
	    details: this.details
	};
	return card;
    }
    var Vault = function(resource) {
	if (resource) {
	    this.resource = resource;
	} else {
	    this.cards = [];
	    this.locked = false;
	    this.resource = new Blob();
	}
    }
    Vault.prototype.details = false;
    Vault.prototype.importCsv = function(data) {
	if (data) {
	    var lines = data.split('\n');
	    for (var i = 0; i < lines.length; i++) {
		var fields = lines[i].split(',');
		if (!fields[0] || fields[0] == "uuid") {
		    continue;
		}
		this.cards.push(new Card({ category: fields[1], name: fields[2], login: fields[4], password: fields[5], url: fields[3], details: fields[6]}));
	    }
	    this.importing = false;
	    data = null;
	} else {
	    this.importing = true;
	}
    }
    Vault.prototype.lock = function() {
	this.serialize();
	this.locked = true;
	this.cards = null;
	this.progress(null);
    }
    Vault.prototype.locked = true;
    Vault.prototype.progress = function (status) {
	this.status = status;
	self.$eval();
    }
    Vault.prototype.remove = function(card) {
	this.cards.splice(this.cards.indexOf(card),1);
    }
    Vault.prototype.serialize = function() {
	if (this.locked) {
	    return;
	}
	var ptext = angular.toJson(this.cards.filter(function(c) { return !c.deleted }).map(function(c) { return c.toSerial() }));
	this.resource.ctext = Aes.encrypt(this.key, this.iv, ptext);
    }
    Vault.prototype.setPassword = function(password) {
	this.resource.salt = null;
	this.key = null;
	this.iv = null;
	this.password = password;
	Aes.precompute(password, this);
	this.progress(null);
    }
    Vault.prototype.unlock = function(contents) {
	if (!this.locked) {
	    return;
	}
	if (!contents) {
	    this.progress("Incorrect password, please try again");
	    return;
	}
	this.locked = false;
	this.cards = contents.map(function(c) { return new Card(c); });
	this.resource.ctext = null;
	this.progress(null);
    }
    Vault.prototype.update = function() {
	if (!this.details) {
	    return;
	}
        if (this.details.password != this.details.confirm) {
            alert("Passwords do not match");
	    return;
        }
	/* check crypto is in Aes.versions */
	this.resource.name = this.details.name;
	this.resource.crypto = this.details.crypto;
	this.setPassword(this.details.password);
	this.details = false;
    }
    var self = this;
    Blob.index(function(r, hdrs) {
	window._loaded = r;
	var mapped = r.map(function(j) { return new Vault(j); });
	window._mapped = mapped;
	self.vaults = mapped;
    });
    self.addCard = function(vault) {
	vault.cards.push(new Card());
    }
    self.save = function(vault) {
	vault.serialize();
	if (vault.resource.id) {
	    vault.resource.$update();
	} else {
	    vault.resource.$create();
	}
    }
    self.addVault = function() {
	var vault = new Vault();
	vault.resource.name = "Untitled";
	vault.details = { cryptos: Aes.versions }
	self.vaults.push(vault);
	self.selected = vault;
    }
    self.allowNewEdit = !(!showModalDialog);
    self.cancelDetails = function(vault) {
	vault.details = false;
    }
    self.editDetails = function(vault) {
	vault.details = { name: vault.resource.name,
			  cryptos: Aes.versions,
			  crypto: vault.resource.crypto }
    }
    self.lock = function(vault) {
	vault.lock();
	self.$eval();
    }
    self.remove = function(vault) {
	if (confirm("Permanently remove '" + vault.resource.name + "'?")) {
	    self.vaults.splice(self.vaults.indexOf(vault),1);
	    if (vault.resource.id) {
		vault.resource.$delete();
	    }
	}
	if (self.selected == vault) {
	    self.selected = null;
	}
    }
    self.select = function(vault) {
	if (self.selected) {
	    self.selected.selected = false;
	}
	self.selected = vault;
	vault.selected = true;
    }
    self.unlock = function(password, vault) {
	Aes.precompute(password, vault, function() {
	    var ptext;
	    if (vault.resource.ctext) {
		ptext = Aes.decrypt(vault.key, vault.iv, vault.resource.ctext);
	    } else {
		ptext = [];
	    }
	    vault.unlock(ptext);
	});
    }
    self.update = function(vault) {
	vault.update();
    }
}
VaultsCtrl.$inject = ['Blob', 'Aes'];
