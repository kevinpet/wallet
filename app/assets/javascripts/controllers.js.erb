'use strict';

function VaultsCtrl(Blob, Aes) {
    function Card(json) {
	if (json) {
	    this.id = json.id;
	    this.name = json.name;
	    this.details = json.details;
	    this.expanded = false;
	} else {
	    this.name = "Unnamed";
	    this.expanded = true;
	}
    }
    Card.prototype.toggle = function() {
	this.expanded = !this.expanded;
    }
    Card.prototype.hide = function() {
	this.expanded = false;
    }
    Card.prototype.toSerial = function() {
	var card = {
	    name: this.name,
	    details: this.details
	};
	return card;
    }
    var Vault = function(resource) {
	if (resource) {
	    this.resource = resource;
	} else {
	    this.cards = [];
	    this.locked = false;
	    this.resource = new Blob();
	}
    }
    Vault.prototype.name = "Untitled";
    Vault.prototype.locked = true;
    Vault.prototype.lock = function() {
	if (this.locked) {
	    return;
	}
	this.locked = true;
	this.resource.ctext = Aes.encrypt(this);
	this.cards = null;
	this.progress(null);
    };
    Vault.prototype.progress = function (status) {
	this.status = status;
	self.$eval();
    };
    Vault.prototype.setPassword = function(password) {
	this.resource.salt = null;
	this.key = null;
	this.iv = null;
	this.password = password;
	Aes.precompute(password, this);
	this.progress(null);
    }
    Vault.prototype.unlock = function(ptext) {
	if (!this.locked) {
	    return;
	}
	this.locked = false;
	this.status = null;
	this.cards = (ptext || []).map(function(c) { return new Card(c); });
	this.resource.ctext = null;
	this.progress(null);
    };
    Vault.prototype.update = function(info) {
	if (!info) {
	    return;
	}
	this.resource.name = info.name;
	this.resource.crypto = info.crypto;
	this.setPassword(info.password);
    };
    var self = this;
    Blob.query({}, function(r, hdrs) {
	window._loaded = r;
	var mapped = r.map(function(j) { return new Vault(j); });
	window._mapped = mapped;
	self.vaults = mapped;
    });
    this.addCard = function(vault) {
	vault.cards.push(new Card());
    }
    this.serialize = function() {
    	this.serial = angular.toJson(this.vaults.filter(function(v) { return v.locked; }).map(function(v) { return v.resource; }), true);
    }
    this.save = function(vault) {
	if (vault.resource.id) {
	    vault.resource.$update();
	} else {
	    vault.resource.$create();
	}
    }
    function vaultDetails(name, crypto, isNew) {
	return { name: name || "Untitled",
		 isNew: isNew,
		 crypto: crypto,
		 cryptos: Aes.versions };
    }
    this.editDetails = function(vault) {
	var updateInfo = showModalDialog("wallets/" + vault.id + "/edit", vaultDetails(vault.resource.name, vault.resource.crypto, false), "dialogwidth: 450; dialogheight: 300; ");
	vault.update(updateInfo);
    }
    this.addVault = function() {
	var vault = new Vault();
	var creationInfo = showModalDialog("wallets/new", vaultDetails("Untitled", null, true), "dialogwidth: 450; dialogheight: 300; ");
	if (creationInfo) {
	    vault.update(creationInfo);
	    this.vaults.push(vault);
	}
    }
    this.remove = function(vault) {
	this.vaults.splice(this.vaults.indexOf(vault),1);
	vault.resource.$delete();
    }
    this.lock = function(vault) {
	vault.lock();
	self.$eval();
    }
    this.unlock = function(password, vault) {
	Aes.precompute(password, vault, function() {
	    var ptext = Aes.decrypt(vault);
	    vault.unlock(ptext);
	});
    };
}
VaultsCtrl.$inject = ['Blob', 'Aes'];

function DetailsCtrl() {
    var args = window.dialogArguments;
    this.name = args.name || "Untitled";
    this.cryptos = args.cryptos;
    this.crypto = args.crypto;
    this.submit = args.isNew ? "Create" : "Save";
    this.password = "";
    this.confirm = "";
    this.cancel = function() {
	window.close();
    }
    this.createVault = function() {
        if (this.password == this.confirm) {
            window.returnValue = { name: this.name,
				   password: this.password,
				   crypto: this.crypto };
            window.close();
        } else {
            alert("Passwords do not match");
        } 
    }
    document.getElementById("vaultName").value = args.name;
    if (args.new) {
        document.getElementById("createButton").value = "Create";
    }
}
DetailsCtrl.$inject = [];
